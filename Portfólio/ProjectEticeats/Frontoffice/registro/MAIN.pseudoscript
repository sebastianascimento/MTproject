modelo Users : 
	construtor () :
		Users.usuarios = []

    funcao criarUser (email) :
        numeroUser = Users.usuarios.tamanho()
        Users.usuarios[numeroUser] = (email-> email, 
                                    dados -> (morada -> [],
                                            nome : “”, 
                                            senha -> “”, 
                                            numeroTele -> 123,
                                            meioPagamento -> (numeroCartao -> 123,
                                                                validade -> 123,
                                                                codigoSeguraca- >123)
                                                ),
                                    historico -> []
                                    )

    funcao verificaEmail (email):
        contador = 0
        tamanhoUsers = Users.usuarios.tamanho ()

        enquanto contador < tamanhoUsers :
            se email == Users.usuarios[contador].email :
                retorna true

            contador ++
        retorna falso

    funcao verificaNome (nome):
        contador = 0
        tamanhoUsers = Users.usuarios.tamanho ()

        enquanto contador < tamanhoUsers :
            se nome == Users.usuarios[contador].dados.nome :
                retorna true

            contador ++
        retorna falso

    funcao verificaNumeroTele (numeroTele):
        contador = 0
        tamanhoUsers = Users.usuarios.tamanho ()

        enquanto contador < tamanhoUsers :
            se numeroTele == Users.usuarios[contador].dados.numeroTele :
                retorna true

            contador ++
        retorna falso

    funcao cadastro () :
        entrada ("qual o email da nova conta ? ", email)
        

        se verificaEMail (email) == falso :
            entrada ("qual sera o seu nome de usuario ?", nome)
            entrada ("qual sera o seu numero ?", tele)

            Users.criarUser (email)

            entrada ("qual sera a sua senha ?", senha)
            entrada ("qual sera a sua morada ?", morada)
            ultimoLugarDaMorada = Users.usuario[Users.usuarios.tamanho() - 1].dados.morada.tamanho() -1

            Users.usuario[Users.usuarios.tamanho() - 1].dados.nome = nome
            Users.usuario[Users.usuarios.tamanho() - 1].dados.senha = senha
            Users.usuario[Users.usuarios.tamanho() - 1].dados.morada[ultimoLugarDaMorada] = morada 
            Users.usuario[Users.usuarios.tamanho() - 1].dados.numeroTele = tele

            entrada ("qual e o numero do seu cartao ?", numeroCartao)
            entrada ("qual qual a validade do seu cartao ?", validade)
            entrada ("qual o codigo de seguranca do seu cartao ?", codigoSeguraca)

            Users.usuario[Users.usuarios.tamanho() - 1].dados.meioPagamento.numeroCartao = numeroCartao
            Users.usuario[Users.usuarios.tamanho() - 1].dados.meioPagamento.validade = validade
            Users.usuario[Users.usuarios.tamanho() - 1].dados.meioPagamento.codigoSeguraca = codigoSeguraca

            imprime ("cadastro concluido")
            retorna nulo

        imprime ("esse email já existe ! O que deseja fazer ?")
        imprime ("m -> voltar ao menu")
        imprime ("t -> tentar outro email")
        entrada ("", opcao)

        se opcao == m :
            Users.menu ()
        se opcao == t :
            Users.cadastro ()

        retorna nulo

            

            